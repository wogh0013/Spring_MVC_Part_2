타임리프 특징
 1. 서버 사이드 HTML 렌더링 (SSR)
  - 백엔드 서버에서 HTML을 동적으로 렌더링하는 용도로 사용
 2. 내츄럴 템플릿
  - 순수 HTML을 최대한 유지하는 특징이 있음
  - 웹 브라우저에서 파일을 직접 열면 정적인 내용 확인 가능
  - 서버를 통해 뷰 템플릿을 거치면 동적으로 변경된 결과 확인 가능
  -> 순수 HTML을 그대로 유지하면서 뷰 템플릿도 사용 가능 -> 내츄럴 템플릿
 3. 스프링 통합 지원
  - 스프링의 다양한 기능 사용 가능

타임리프 사용 선언
<html xmlns:th="http://www.thymeleaf.org">

텍스트
 1) text
  - <span th:text="${data}"></span>
  - [[${data}]]
 2) utext (unescape)
  - <span th:utext="${data}"></span>
  - [(${data})]

리터럴
 - 소스 코드상에 고정된 값
 - 리터럴 대체 문법 ' || ' 굿 !!!
 1) 문자 리터럴
  - 항상 ''로 감싸야 한다.
  - 같은 결의 문자가 공백없이 쭉 이어진다면 '' 생략 가능
 2) 숫자 리터럴
 3) 불린 리터럴
 4) null 리터럴 

비교 연산, 조건식, Elvis 연산자, No-Operation(_)

속성 설정
 - th:* 속성을 지정하면 기존 속성을 대체한다.

반복
 - th:each

주석
 - 표준 HTML 주석        <!-- -->
 - 타임리프 파서 주석     <!--/* */-->    (아예 사라짐)

블락
 - th:block
 - 타임리프 자체의 기능
 - 여러 태그를 묶을 때 사용 

자바스크립트 인라인
 - 자바스크립트에서 타임리프를 편리하게 사용할 수 있는 기능
 - <script th:inline="javascript">
 - 텍스트 렌더링
   var username = [[${user.username}]];
    - 인라인 사용 전  var username = userA;
    - 인라인 사용 후  var username = "userA";
 - 자바스크립트 내추럴 템플릿
 - 객체
   var user = [[${user}]];
    - 인라인 사용 전  var user = BasicController.User(username=userA, age=10);
    - 인라인 사용 후  var user = {"username":"userA", "age":10};
    - 사용 전은 객체의 toString() 호출, 사용 후는 객체를 JSON으로 변환
 - 인라인 each (반복문)


템플릿 조각
 - 웹 페이지를 개발할 때 공통 영역이 많음(상단 영역, 하단 영역, 좌측 카테고리 등)
   -> 여러 페이지에서 함께 사용 -> 타임리프의 템플릿 조각, 레이아웃 기능 활용
 - th:fragment
 - template/fragment/footer :: copy
   ->template/fragment/footer.html 안에 있는 th:fragment="copy"라는 부분을 템플릿 조각으로 가져와서 사용   
 - th:insert : 현재 태그(div) 내부에 추가
 - th:replate : 현재 태그(div)를 대체
 - 파라미터 사용
   <div th:replace="~{template/fragment/footer :: copyParam ('데이터1', '데이터2')}"></div>

템플릿 레이아웃
 - 이전에는 일부 코드 조각을 가지고 와서 사용
   -> 이번엔 코드 조각을 레이아웃에 넘겨서 사용
 - 공통으로 사용하는 정보들 -> 각 페이지마다 추가or변경하고 싶은 부분을 코드 조각으로 불러옴
 - 공통 부분 유지, 추가한 부분 변경
 - 레이아웃 존재 -> 그 레이아웃에 필요한 코드 조각 전달 -> 완성

템플릿 레이아웃2
 - 앞의 개념을 <head>에만 적용하는 게 아니라, <html> 전체에 적용함
 - 페이지가 많아질 때 사용하면 좋음
























